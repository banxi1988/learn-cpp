{
  // Place your learn-cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "New Cpp Demo Program": {
    "scope": "cpp",
    "prefix": "newdemo",
    "body": [
      "#include <iostream>",
      "#include <string>",
      "using std::cout;",
      "using std::endl;",
      "using std::string;",
      "",
      "int main(int argc, char const *argv[]){",
      "    return 0;",
      "}"
    ]
  },
  "New Gtest Cpp Demo Program": {
    "scope": "cpp",
    "prefix": "newgtestdemo",
    "body": [
      "#include <gtest/gtest.h>",
      "#include <gmock/gmock.h>",
      "#include <iostream>",
      "#include <string>",
      "using std::cout;",
      "using std::endl;",
      "using std::string;",
      "",
      "TEST(DemoTestSuite,DemoTestCase){",
      "    EXPECT_EQ(2020,2020);",
      "}",
      "GTEST_API_ int main(int argc, char  *argv[]){",
      "    printf(\"Running main() from %s\\n\", __FILE__);",
      "    testing::InitGoogleMock(&argc,argv);",
      "    return RUN_ALL_TESTS();",
      "}"
    ]
  }
}
